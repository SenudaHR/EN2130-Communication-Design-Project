options:
  parameters:
    author: BellLabz
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: cdp project
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: cdp
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: cdp
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3248, 456.0]
    rotation: 0
    state: enabled

blocks:
- name: arity
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2640, 84.0]
    rotation: 0
    state: enabled
- name: cc_dec
  id: variable_cc_decoder_def
  parameters:
    comment: ''
    dim1: '1'
    dim2: '4'
    framebits: MTU*8
    k: k
    mode: fec.CC_TAILBITING
    ndim: '1'
    padding: 'True'
    polys: polys
    rate: '2'
    state_end: '-1'
    state_start: '0'
    value: '"ok"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2920, 528.0]
    rotation: 0
    state: enabled
- name: cc_enc
  id: variable_cc_encoder_def
  parameters:
    comment: ''
    dim1: '1'
    dim2: '1'
    framebits: MTU*8
    k: k
    mode: fec.CC_TAILBITING
    ndim: '0'
    padding: 'True'
    polys: polys
    rate: '2'
    state_start: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2648, 596.0]
    rotation: 0
    state: enabled
- name: delay
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 1,0,1,1
    label: Delay
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '200'
    value: '42'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3176, 8.0]
    rotation: 0
    state: enabled
- name: eq_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,1,1,1'
    label: 'Equalizer: rate'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.001'
    stop: '0.1'
    value: '0.01'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3008, 312.0]
    rotation: 0
    state: enabled
- name: excess_bw
  id: variable
  parameters:
    comment: Set Bandwidth
    value: '.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2464, 28.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: 2e9
    step: 100e3
    stop: 6e9
    value: 2.4e9
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3448, 216.0]
    rotation: 0
    state: enabled
- name: freq_offset
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@0: 0,1,1,1'
    label: Frequency Offset
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-0.1'
    step: '0.001'
    stop: '0.1'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3008, 152.0]
    rotation: 0
    state: enabled
- name: hdr_format
  id: variable_header_format_default
  parameters:
    access_code: '11100001010110101110100010010011'
    bps: '1'
    comment: ''
    threshold: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2544, 364.0]
    rotation: 0
    state: enabled
- name: if_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: IF gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '50'
    value: '40'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3416, 8.0]
    rotation: 0
    state: enabled
- name: k
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2608, 180.0]
    rotation: 0
    state: enabled
- name: nfilts
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2592, -4.0]
    rotation: 0
    state: enabled
- name: noise_volt
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@0: 0,0,1,1'
    label: Noise Voltage
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '1'
    value: '0.4'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3024, 8.0]
    rotation: 0
    state: enabled
- name: phase_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,2,1,1'
    label: 'Phase: Bandwidth'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.01'
    stop: '1.0'
    value: 6.28/100.0
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3160, 288.0]
    rotation: 0
    state: enabled
- name: polys
  id: variable
  parameters:
    comment: ''
    value: '[109, 79]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2616, 268.0]
    rotation: 0
    state: enabled
- name: qpsk
  id: variable_constellation_rect
  parameters:
    comment: ''
    const_points: '[0.707+0.707j, -0.707+0.707j, -0.707-0.707j, 0.707-0.707j]'
    imag_sect: '2'
    precision: '8'
    real_sect: '2'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 2, 3]'
    w_imag_sect: '1'
    w_real_sect: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3120, 660.0]
    rotation: 0
    state: enabled
- name: rf_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: RF gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '60'
    value: '60'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3312, 248.0]
    rotation: 0
    state: enabled
- name: rf_gain_0
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: RF gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '60'
    value: '60'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3352, 144.0]
    rotation: 0
    state: enabled
- name: rf_gain_sink
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: RF gain sink
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '60'
    value: '10'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3176, 136.0]
    rotation: 0
    state: enabled
- name: rrc_taps
  id: variable
  parameters:
    comment: ''
    value: firdes.root_raised_cosine(nfilts, nfilts, 1.0/float(sps), 0.35, 11*sps*nfilts)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2832, 4.0]
    rotation: 0
    state: enabled
- name: rx_freq_
  id: variable
  parameters:
    comment: Set rx frequency
    value: 433e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2872, 92.0]
    rotation: 0
    state: enabled
- name: rxbw
  id: variable
  parameters:
    comment: ''
    value: '10000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2720, 268.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 600e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2704, 164.0]
    rotation: 0
    state: enabled
- name: samp_rate_blade
  id: variable
  parameters:
    comment: ''
    value: 600e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2416, 108.0]
    rotation: 0
    state: enabled
- name: spr
  id: variable
  parameters:
    comment: ''
    value: '750000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2704, 20.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: Samples Per Symbol
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2760, 116.0]
    rotation: 0
    state: enabled
- name: taps
  id: variable
  parameters:
    comment: ''
    value: '[1.0, 0.25-0.25j, 0.50 + 0.10j, -0.3 + 0.2j]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2808, 332.0]
    rotation: 0
    state: enabled
- name: time_offset
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@0: 0,2,1,1'
    label: Timing Offset
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.999'
    step: '0.0001'
    stop: '1.001'
    value: '1.00'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3112, 152.0]
    rotation: 0
    state: enabled
- name: timing_loop_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,0,1,1'
    label: 'Time: BW'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.01'
    stop: '0.2'
    value: 6.28/100.0
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3424, 8.0]
    rotation: 0
    state: enabled
- name: tx_freq
  id: variable
  parameters:
    comment: Set tx frequency
    value: 600e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2824, 228.0]
    rotation: 0
    state: enabled
- name: txbw
  id: variable
  parameters:
    comment: ''
    value: '9000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2512, 204.0]
    rotation: 0
    state: enabled
- name: txgain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '18'
    step: '1'
    stop: '60'
    value: '50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2640, 500.0]
    rotation: 0
    state: enabled
- name: variable_adaptive_algorithm_0
  id: variable_adaptive_algorithm
  parameters:
    comment: ''
    cons: qpsk
    delta: '10.0'
    ffactor: '0.99'
    modulus: '4'
    step_size: '.0001'
    type: cma
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3064, 460.0]
    rotation: 0
    state: enabled
- name: variable_qtgui_entry_0
  id: variable_qtgui_entry
  parameters:
    comment: ''
    entry_signal: editingFinished
    gui_hint: ''
    label: ''
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 44.0]
    rotation: 0
    state: enabled
- name: MTU
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: MTU
    short_id: ''
    type: intx
    value: '1500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2912, 180.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1808, 1016.0]
    rotation: 180
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.8'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792.0, 408]
    rotation: 90
    state: disabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.8'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648.0, 1400]
    rotation: 90
    state: disabled
- name: blocks_repack_bits_bb_1
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: '1'
    l: '8'
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 868.0]
    rotation: 180
    state: enabled
- name: blocks_repack_bits_bb_1_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: '1'
    l: '8'
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 1844.0]
    rotation: 180
    state: enabled
- name: blocks_tagged_stream_mux_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 192.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_mux_0_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1464, 1144.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 540.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 1508.0]
    rotation: 0
    state: enabled
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: unpack 2 bits per symbol into bits
    k: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 856.0]
    rotation: 180
    state: enabled
- name: blocks_unpack_k_bits_bb_0_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: unpack 2 bits per symbol into bits
    k: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 1832.0]
    rotation: 180
    state: enabled
- name: channels_channel_model_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: Simulated channel
    epsilon: time_offset
    freq_offset: freq_offset
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: noise_volt
    seed: '0'
    taps: 3+2j
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 496.0]
    rotation: 0
    state: enabled
- name: channels_channel_model_0_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: Simulated channel
    epsilon: time_offset
    freq_offset: freq_offset
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: noise_volt
    seed: '0'
    taps: taps
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 1472.0]
    rotation: 0
    state: enabled
- name: controls
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 0,0,1,2
    label0: Channel
    label1: Receiver
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3456, 332.0]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: "Decode a constellation's points from \na complex space to index of constellation\
      \ \nsymbol based on the map of the  object."
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1952, 864.0]
    rotation: 180
    state: enabled
- name: digital_constellation_decoder_cb_0_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: "Decode a constellation's points from \na complex space to index of constellation\
      \ \nsymbol based on the map of the  object."
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1816, 1840.0]
    rotation: 180
    state: enabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: Modulation block
    constellation: qpsk
    differential: 'True'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 516.0]
    rotation: 0
    state: enabled
- name: digital_constellation_modulator_0_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: Modulation block
    constellation: qpsk
    differential: 'True'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 1540.0]
    rotation: 0
    state: enabled
- name: digital_correlate_access_code_xx_ts_0
  id: digital_correlate_access_code_xx_ts
  parameters:
    access_code: '11100001010110101110100010010011'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tagname: '"packet_len"'
    threshold: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 852.0]
    rotation: 180
    state: enabled
- name: digital_correlate_access_code_xx_ts_0_0
  id: digital_correlate_access_code_xx_ts
  parameters:
    access_code: '11100001010110101110100010010011'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tagname: '"packet_len"'
    threshold: '1'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 1820.0]
    rotation: 180
    state: enabled
- name: digital_costas_loop_cc_0
  id: digital_costas_loop_cc
  parameters:
    affinity: ''
    alias: ''
    comment: Phase and Fine Frequency Correction
    maxoutbuf: '0'
    minoutbuf: '0'
    order: arity
    use_snr: 'False'
    w: phase_bw
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1944, 616.0]
    rotation: 0
    state: enabled
- name: digital_costas_loop_cc_0_0
  id: digital_costas_loop_cc
  parameters:
    affinity: ''
    alias: ''
    comment: Phase and Fine Frequency Correction
    maxoutbuf: '0'
    minoutbuf: '0'
    order: arity
    use_snr: 'False'
    w: phase_bw
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 1592.0]
    rotation: 0
    state: enabled
- name: digital_crc_append_0
  id: digital_crc_append
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    final_xor: '0xFFFFFFFF'
    initial_value: '0xFFFFFFFF'
    input_reflected: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_bits: '32'
    poly: '0x4C11DB7'
    result_reflected: 'True'
    skip_header_bytes: '0'
    swap_endianness: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [336, 184.0]
    rotation: 0
    state: true
- name: digital_crc_append_0_0
  id: digital_crc_append
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    final_xor: '0xFFFFFFFF'
    initial_value: '0xFFFFFFFF'
    input_reflected: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_bits: '32'
    poly: '0x4C11DB7'
    result_reflected: 'True'
    skip_header_bytes: '0'
    swap_endianness: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 1248.0]
    rotation: 0
    state: true
- name: digital_diff_decoder_bb_0
  id: digital_diff_decoder_bb
  parameters:
    affinity: ''
    alias: ''
    coding: digital.DIFF_DIFFERENTIAL
    comment: "translate the differential coded symbols\n back to their original symbols"
    maxoutbuf: '0'
    minoutbuf: '0'
    modulus: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 852.0]
    rotation: 180
    state: enabled
- name: digital_diff_decoder_bb_0_0
  id: digital_diff_decoder_bb
  parameters:
    affinity: ''
    alias: ''
    coding: digital.DIFF_DIFFERENTIAL
    comment: "translate the differential coded symbols\n back to their original symbols"
    maxoutbuf: '0'
    minoutbuf: '0'
    modulus: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1560, 1828.0]
    rotation: 180
    state: enabled
- name: digital_linear_equalizer_0_0
  id: digital_linear_equalizer
  parameters:
    adapt_after_training: 'True'
    affinity: ''
    alg: variable_adaptive_algorithm_0
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '15'
    sps: '4'
    training_sequence: '[ ]'
    training_start_tag: corr_est
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1808, 392.0]
    rotation: 0
    state: enabled
- name: digital_linear_equalizer_0_0_0
  id: digital_linear_equalizer
  parameters:
    adapt_after_training: 'True'
    affinity: ''
    alg: variable_adaptive_algorithm_0
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '15'
    sps: '4'
    training_sequence: '[ ]'
    training_start_tag: corr_est
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 1392.0]
    rotation: 0
    state: enabled
- name: digital_map_bb_0
  id: digital_map_bb
  parameters:
    affinity: ''
    alias: ''
    comment: "convert the symbols \nfrom the differential decoder to the \noriginal\
      \ symbols we transmitted."
    map: '[0,1,2,3]'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 848.0]
    rotation: 180
    state: enabled
- name: digital_map_bb_0_0
  id: digital_map_bb
  parameters:
    affinity: ''
    alias: ''
    comment: "convert the symbols \nfrom the differential decoder to the \noriginal\
      \ symbols we transmitted."
    map: '[0,1,2,3]'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 1824.0]
    rotation: 180
    state: enabled
- name: digital_protocol_formatter_async_0
  id: digital_protocol_formatter_async
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    format: hdr_format
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 176.0]
    rotation: 0
    state: enabled
- name: digital_protocol_formatter_async_0_0
  id: digital_protocol_formatter_async
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    format: hdr_format
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 1168.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: phase_bw
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '32'
    osps: '4'
    pfb_mf_taps: rrc_taps
    resamp_type: digital.IR_PFB_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 480.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: phase_bw
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '32'
    osps: '4'
    pfb_mf_taps: rrc_taps
    resamp_type: digital.IR_PFB_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1352, 1456.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_add(gr.basic_block):\n    \"\"\"\n\
      \    Block to prepend an address byte to a PDU payload\n    \"\"\"\n    def\
      \ __init__(self, address=0x01):\n        gr.basic_block.__init__(\n        \
      \    self,\n            name=\"address_add\",\n            in_sig=[],\n    \
      \        out_sig=[]\n        )\n        self.address = address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  # prepend address\n            data.insert(0, self.address)\n           \
      \ out_msg = pmt.cons(meta, pmt.init_u8vector(len(data), data))\n           \
      \ self.message_port_pub(pmt.intern(\"out\"), out_msg)\n"
    address: '15'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('address_add', 'address_add', [('address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to prepend an address byte to a PDU
      payload\n    ', ['address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [688, 200.0]
    rotation: 0
    state: enabled
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_add(gr.basic_block):\n    \"\"\"\n\
      \    Block to prepend an address byte to a PDU payload\n    \"\"\"\n    def\
      \ __init__(self, address=0x01):\n        gr.basic_block.__init__(\n        \
      \    self,\n            name=\"address_add\",\n            in_sig=[],\n    \
      \        out_sig=[]\n        )\n        self.address = address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  # prepend address\n            data.insert(0, self.address)\n           \
      \ out_msg = pmt.cons(meta, pmt.init_u8vector(len(data), data))\n           \
      \ self.message_port_pub(pmt.intern(\"out\"), out_msg)\n"
    address: '50'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('address_add', 'address_add', [('address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to prepend an address byte to a PDU
      payload\n    ', ['address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 1264.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass blk(gr.basic_block):\n    \"\"\"\n    PDU to\
      \ UTF-8 Text File Writer\n    - Overwrites at start of simulation\n    - Writes\
      \ only payloads (clean UTF-8)\n    - Appends for subsequent PDUs\n    \"\"\"\
      \n\n    def __init__(self, file_path=\"output.txt\"):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"PDU to File Writer\",\n            in_sig=[],\n\
      \            out_sig=[]\n        )\n        self.file_path = file_path\n   \
      \     self.first_write = True  # ensures overwrite once\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.set_msg_handler(pmt.intern(\"in\"), self._write)\n\n  \
      \  def _write(self, msg):\n        if not pmt.is_pair(msg):\n            return\n\
      \        vec = pmt.cdr(msg)\n        if not pmt.is_u8vector(vec):\n        \
      \    return\n\n        # Extract bytes\n        data = bytearray(pmt.u8vector_elements(vec))\n\
      \        try:\n            # Safely decode as UTF-8\n            text = data.decode(\"\
      utf-8\", errors=\"ignore\")\n\n            # Overwrite first time, then append\n\
      \            mode = \"w\" if self.first_write else \"a\"\n            with open(self.file_path,\
      \ mode, encoding=\"utf-8\") as f:\n                f.write(text)\n\n       \
      \     self.first_write = False\n            print(f\"[TextFile] Wrote {len(text)}\
      \ chars to {self.file_path}\")\n\n        except Exception as e:\n         \
      \   print(f\"[TextFile] Error writing: {e}\")\n"
    affinity: ''
    alias: ''
    comment: ''
    file_path: r"D:\University\Semester 3\EN2130\gnupractice\rx.txt"
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('PDU to File Writer', 'blk', [('file_path', "'output.txt'")], [('in',
      'message', 1)], [], '\n    PDU to UTF-8 Text File Writer\n    - Overwrites at
      start of simulation\n    - Writes only payloads (clean UTF-8)\n    - Appends
      for subsequent PDUs\n    ', ['file_path'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [680, 1112.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      import threading\nfrom gnuradio import gr\n\nclass blk(gr.basic_block):\n  \
      \  \"\"\"\n    Custom block: File reader -> PDU sender with retransmission control.\n\
      \    - Splits file into packets (1 byte for ID, rest for payload)\n    - Sends\
      \ packets as PDUs\n    - Waits for ACKs [0xAA, packet_id]\n    - Retransmits\
      \ until ACK received or retry limit exceeded\n    \"\"\"\n\n    def __init__(self,\
      \ filepath=\"\", wait_time=2.0, pkt_size=32):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"File to PDU with ARQ\",\n           \
      \ in_sig=[],\n            out_sig=[]\n        )\n\n        # Parameters\n  \
      \      self._filepath = filepath\n        self._timeout = float(wait_time)\n\
      \        self._pkt_size = int(pkt_size)\n\n        # Message ports\n       \
      \ self.message_port_register_out(pmt.intern(\"out\"))\n        self.message_port_register_in(pmt.intern(\"\
      ack_in\"))\n        self.set_msg_handler(pmt.intern(\"ack_in\"), self._process_ack)\n\
      \n        # Thread + synchronization\n        self._thread = threading.Thread(target=self._run)\n\
      \        self._thread.daemon = True\n        self._stop_event = threading.Event()\n\
      \        self._ack_event = threading.Event()\n        self._lock = threading.Lock()\n\
      \n        self._waiting_for = None  # Expected ACK packet ID\n\n    def start(self):\n\
      \        self._stop_event.clear()\n        self._thread.start()\n        return\
      \ super().start()\n\n    def stop(self):\n        self._stop_event.set()\n \
      \       self._ack_event.set()   # unblock wait\n        self._thread.join()\n\
      \        return super().stop()\n\n    # ---------------------------\n    # Sending\
      \ loop\n    # ---------------------------\n    def _run(self):\n        try:\n\
      \            with open(self._filepath, \"rb\") as fh:\n                raw =\
      \ fh.read()\n        except OSError as e:\n            print(f\"[FilePDU] Could\
      \ not open file: {e}\")\n            return\n\n        # Create chunks (reserve\
      \ 1 byte for sequence ID)\n        chunks = []\n        step = self._pkt_size\
      \ - 1\n        for i in range(0, len(raw), step):\n            chunks.append(raw[i:i+step])\n\
      \n        seq_id = 1  # 0x01..0xFF (avoid 0x00)\n\n        for block in chunks:\n\
      \            if self._stop_event.is_set():\n                break\n\n      \
      \      packet = bytes([seq_id]) + block\n            vec = pmt.init_u8vector(len(packet),\
      \ list(packet))\n            pdu = pmt.cons(pmt.PMT_NIL, vec)\n\n          \
      \  # Update expected ACK\n            with self._lock:\n                self._waiting_for\
      \ = seq_id\n                self._ack_event.clear()\n\n            attempts\
      \ = 0\n            limit = 100\n\n            while not self._stop_event.is_set()\
      \ and attempts < limit:\n                self.message_port_pub(pmt.intern(\"\
      out\"), pdu)\n                print(f\"[FilePDU] Packet 0x{seq_id:02X} sent\
      \ (try {attempts+1})\")\n\n                if self._ack_event.wait(timeout=self._timeout):\n\
      \                    # ACK arrived\n                    break\n            \
      \    else:\n                    print(f\"[FilePDU] Timeout waiting for ACK of\
      \ 0x{seq_id:02X}, retrying...\")\n                    attempts += 1\n\n    \
      \        if attempts >= limit:\n                print(f\"[FilePDU] Failed: no\
      \ ACK for packet 0x{seq_id:02X} after {limit} tries\")\n                self._stop_event.set()\n\
      \                return\n\n            # Increment sequence ID (avoid zero)\n\
      \            seq_id = (seq_id + 1) & 0xFF\n            if seq_id == 0:\n   \
      \             seq_id = 1\n\n    # ---------------------------\n    # ACK Handler\n\
      \    # ---------------------------\n    def _process_ack(self, msg):\n     \
      \   try:\n            payload = pmt.cdr(msg)\n\n            if not pmt.is_u8vector(payload):\n\
      \                print(\"[FilePDU] Invalid ACK format (not u8vector)\")\n  \
      \              return\n\n            arr = bytearray(pmt.u8vector_elements(payload))\n\
      \            if len(arr) < 2:\n                print(\"[FilePDU] ACK too short\"\
      )\n                return\n\n            if arr[0] != 0xAA:\n              \
      \  print(\"[FilePDU] Bad ACK header\")\n                return\n\n         \
      \   ack_id = arr[1]\n\n            with self._lock:\n                if ack_id\
      \ == self._waiting_for:\n                    print(f\"[FilePDU] ACK received\
      \ for packet 0x{ack_id:02X}\")\n                    self._ack_event.set()\n\n\
      \        except Exception as e:\n            print(f\"[FilePDU] Error processing\
      \ ACK: {e}\")\n"
    affinity: ''
    alias: ''
    comment: ''
    filepath: r"D:\University\Semester 3\EN2130\gnupractice\ab.txt"
    maxoutbuf: '0'
    minoutbuf: '0'
    pkt_size: '32'
    wait_time: '0.1'
  states:
    _io_cache: '(''File to PDU with ARQ'', ''blk'', [(''filepath'', "''''"), (''wait_time'',
      ''2.0''), (''pkt_size'', ''32'')], [(''ack_in'', ''message'', 1)], [(''out'',
      ''message'', 1)], ''\n    Custom block: File reader -> PDU sender with retransmission
      control.\n    - Splits file into packets (1 byte for ID, rest for payload)\n    -
      Sends packets as PDUs\n    - Waits for ACKs [0xAA, packet_id]\n    - Retransmits
      until ACK received or retry limit exceeded\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 164.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_check(gr.basic_block):\n    \"\"\"\n\
      \    Block to check address and strip it if matches\n    \"\"\"\n    def __init__(self,\
      \ my_address=0x01):\n        gr.basic_block.__init__(\n            self,\n \
      \           name=\"address_check\",\n            in_sig=[],\n            out_sig=[]\n\
      \        )\n        self.my_address = my_address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  if data[0] == self.my_address:\n                # strip address\n       \
      \         payload = data[1:]\n                out_msg = pmt.cons(meta, pmt.init_u8vector(len(payload),\
      \ payload))\n                self.message_port_pub(pmt.intern(\"out\"), out_msg)\n\
      \            # else drop silently\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    my_address: '15'
  states:
    _io_cache: ('address_check', 'address_check', [('my_address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to check address and strip it if
      matches\n    ', ['my_address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 1120.0]
    rotation: 0
    state: enabled
- name: epy_block_3_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_check(gr.basic_block):\n    \"\"\"\n\
      \    Block to check address and strip it if matches\n    \"\"\"\n    def __init__(self,\
      \ my_address=0x01):\n        gr.basic_block.__init__(\n            self,\n \
      \           name=\"address_check\",\n            in_sig=[],\n            out_sig=[]\n\
      \        )\n        self.my_address = my_address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  if data[0] == self.my_address:\n                # strip address\n       \
      \         payload = data[1:]\n                out_msg = pmt.cons(meta, pmt.init_u8vector(len(payload),\
      \ payload))\n                self.message_port_pub(pmt.intern(\"out\"), out_msg)\n\
      \            # else drop silently\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    my_address: '50'
  states:
    _io_cache: ('address_check', 'address_check', [('my_address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to check address and strip it if
      matches\n    ', ['my_address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 424.0]
    rotation: 180
    state: enabled
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      import zlib\nfrom gnuradio import gr\n\nclass blk(gr.basic_block):\n    \"\"\
      \"\n    CRC32 Checker + Dedup + Forwarder\n    - Input : [pkt_id | payload |\
      \ crc32]\n    - Output: [payload only] if CRC valid and not duplicate\n    -\
      \ Still sends ACKs for valid packets\n    \"\"\"\n\n    def __init__(self):\n\
      \        gr.basic_block.__init__(\n            self,\n            name=\"CRC32\
      \ Dedup + Forwarder\",\n            in_sig=[],\n            out_sig=[]\n   \
      \     )\n\n        self.received_ids = set()  # track processed packet IDs\n\
      \n        # Ports\n        self.message_port_register_in(pmt.intern(\"in\"))\n\
      \        self.message_port_register_out(pmt.intern(\"out\"))  # forward payload\n\
      \        self.message_port_register_out(pmt.intern(\"ack_out\"))  # ACKs\n\n\
      \        self.set_msg_handler(pmt.intern(\"in\"), self._handle_msg)\n\n    def\
      \ _handle_msg(self, msg):\n        if not pmt.is_pair(msg):\n            return\n\
      \        vec = pmt.cdr(msg)\n        if not pmt.is_u8vector(vec):\n        \
      \    return\n\n        data = bytearray(pmt.u8vector_elements(vec))\n      \
      \  if len(data) < 5:\n            print(\"[CRC32] Frame too short\")\n     \
      \       return\n\n        pkt_id = data[0]\n        payload = data[1:-4]\n \
      \       recv_crc = int.from_bytes(data[-4:], \"big\")\n        calc_crc = zlib.crc32(bytes([pkt_id])\
      \ + payload) & 0xFFFFFFFF\n\n        if calc_crc != recv_crc:\n            print(f\"\
      [CRC32] FAIL (Packet {pkt_id})\")\n            return\n\n        # \u2705 CRC\
      \ OK\n        print(f\"[CRC32] OK (Packet {pkt_id})\")\n\n        # Send ACK\
      \ for all valid packets\n        ack_bytes = bytes([0xAA, pkt_id])\n       \
      \ ack_vec = pmt.init_u8vector(len(ack_bytes), list(ack_bytes))\n        ack_pdu\
      \ = pmt.cons(pmt.PMT_NIL, ack_vec)\n        self.message_port_pub(pmt.intern(\"\
      ack_out\"), ack_pdu)\n\n        # Forward payload only if packet_id not already\
      \ processed\n        if pkt_id not in self.received_ids:\n            self.received_ids.add(pkt_id)\n\
      \            try:\n                text = payload.decode(\"utf-8\", errors=\"\
      ignore\")\n                clean_bytes = text.encode(\"utf-8\")\n          \
      \      out_vec = pmt.init_u8vector(len(clean_bytes), list(clean_bytes))\n  \
      \              out_msg = pmt.cons(pmt.PMT_NIL, out_vec)\n                self.message_port_pub(pmt.intern(\"\
      out\"), out_msg)\n                print(f\"[Forward] Packet {pkt_id} \u2192\
      \ {len(clean_bytes)} bytes forwarded\")\n            except Exception as e:\n\
      \                print(f\"[Forward] UTF-8 decode error: {e}\")\n        else:\n\
      \            print(f\"[Forward] Packet {pkt_id} duplicate, not forwarded\")\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''CRC32 Dedup + Forwarder'', ''blk'', [], [(''in'', ''message'',
      1)], [(''ack_out'', ''message'', 1), (''out'', ''message'', 1)], ''\n    CRC32
      Checker + Dedup + Forwarder\n    - Input : [pkt_id | payload | crc32]\n    -
      Output: [payload only] if CRC valid and not duplicate\n    - Still sends ACKs
      for valid packets\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 1088.0]
    rotation: 0
    state: enabled
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport pmt\nfrom\
      \ gnuradio import gr\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding\
      \ import pad\n\nclass aes_encrypt(gr.basic_block):\n    \"\"\"\n    AES Encryption\
      \ Block\n    - Encrypts PDUs using AES-128-CBC\n    - Key & IV fixed for demo\
      \ (replace with secure exchange in real systems)\n    \"\"\"\n\n    def __init__(self,\
      \ key=b\"1234567890abcdef\", iv=b\"abcdef1234567890\"):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"AES Encrypt\",\n            in_sig=[],\n\
      \            out_sig=[]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n        self.key\
      \ = key\n        self.iv = iv\n\n    def handle_msg(self, msg_pmt):\n      \
      \  if pmt.is_pair(msg_pmt):\n            meta = pmt.car(msg_pmt)\n         \
      \   data = bytes(pmt.u8vector_elements(pmt.cdr(msg_pmt)))\n\n            cipher\
      \ = AES.new(self.key, AES.MODE_CBC, self.iv)\n            enc_data = cipher.encrypt(pad(data,\
      \ AES.block_size))\n\n            out_pmt = pmt.cons(meta, pmt.init_u8vector(len(enc_data),\
      \ list(enc_data)))\n            self.message_port_pub(pmt.intern(\"out\"), out_pmt)\n"
    affinity: ''
    alias: ''
    comment: ''
    iv: b"abcdef1234567890"
    key: b"1234567890abcd30"
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES Encrypt', 'aes_encrypt', [('key', "b'1234567890abcdef'"), ('iv',
      "b'abcdef1234567890'")], [('in', 'message', 1)], [('out', 'message', 1)], '\n    AES
      Encryption Block\n    - Encrypts PDUs using AES-128-CBC\n    - Key & IV fixed
      for demo (replace with secure exchange in real systems)\n    ', ['iv', 'key'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 92.0]
    rotation: 0
    state: enabled
- name: epy_block_6
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport pmt\nfrom\
      \ gnuradio import gr\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding\
      \ import unpad\n\nclass aes_decrypt(gr.basic_block):\n    \"\"\"\n    AES Decryption\
      \ Block\n    - Decrypts PDUs using AES-128-CBC\n    - Must use the same Key\
      \ & IV as the Encrypt block\n    \"\"\"\n\n    def __init__(self, key=b\"1234567890abcdef\"\
      , iv=b\"abcdef1234567890\"):\n        gr.basic_block.__init__(\n           \
      \ self,\n            name=\"AES Decrypt\",\n            in_sig=[],\n       \
      \     out_sig=[]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n        self.key\
      \ = key\n        self.iv = iv\n\n    def handle_msg(self, msg_pmt):\n      \
      \  if pmt.is_pair(msg_pmt):\n            meta = pmt.car(msg_pmt)\n         \
      \   data = bytes(pmt.u8vector_elements(pmt.cdr(msg_pmt)))\n\n            cipher\
      \ = AES.new(self.key, AES.MODE_CBC, self.iv)\n            dec_data = unpad(cipher.decrypt(data),\
      \ AES.block_size)\n\n            out_pmt = pmt.cons(meta, pmt.init_u8vector(len(dec_data),\
      \ list(dec_data)))\n            self.message_port_pub(pmt.intern(\"out\"), out_pmt)\n"
    affinity: ''
    alias: ''
    comment: ''
    iv: b"abcdef1234567890"
    key: b"1234567890abcd30"
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES Decrypt', 'aes_decrypt', [('key', "b'1234567890abcdef'"), ('iv',
      "b'abcdef1234567890'")], [('in', 'message', 1)], [('out', 'message', 1)], '\n    AES
      Decryption Block\n    - Decrypts PDUs using AES-128-CBC\n    - Must use the
      same Key & IV as the Encrypt block\n    ', ['iv', 'key'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [160, 1228.0]
    rotation: 0
    state: enabled
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Header
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 144.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 240.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0_0_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 1208.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0_1
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Header
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1168, 1112.0]
    rotation: 0
    state: true
- name: pdu_tagged_stream_to_pdu_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 960.0]
    rotation: 0
    state: enabled
- name: pdu_tagged_stream_to_pdu_0_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 392.0]
    rotation: 180
    state: enabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: 'received@0: 0,0,1,1'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2032, 532.0]
    rotation: 180
    state: enabled
- name: qtgui_const_sink_x_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: 'received@0: 0,2,2,1'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2056, 1516.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: Frequency Spectrum of Tx
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: TX - Spectrum
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 676.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.05'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: Frequency Spectrum of Tx ACK
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: TX - Spectrum of ACK
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 1652.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_1
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: RX-SPECTRUM
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 300.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_1_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '256'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: RX-SPECTRUM of ACK
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 1700.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 'received@1: 0,0,1,1'
    label1: Symbols
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: ''
    nconnections: '1'
    size: '500'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '4'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 996.0]
    rotation: 180
    state: enabled
- name: received
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 2,0,1,1
    label0: Constellation
    label1: Symbols
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3432, 468.0]
    rotation: 0
    state: enabled
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: "def tag():\n    import os\n    global content\n    detected = False\n \
      \   typs = [b'mp3', b'jpeg', b'mp4', b'ts']\n\n    print(\"[INFO] Waiting for\
      \ received file type...\")\n\n    while not detected:\n        try:\n      \
      \      with open('./rx.tmp', 'rb') as file:\n                content = file.read()\n\
      \        except FileNotFoundError:\n            print(\"[WARN] rx.tmp not found\
      \ yet...\")\n            time.sleep(1)\n            continue\n\n        for\
      \ tag in typs:\n            position = content.rfind(tag)\n            if position\
      \ != -1:\n                remove_preamble('./rx.tmp')\n                filename\
      \ = {\n                    b'jpeg': \"out.jpg\",\n                    b'mp3':\
      \ \"out.mp3\",\n                    b'mp4': \"out.mp4\",\n                 \
      \   b'ts': \"out.ts\"\n                }[tag]\n\n                with open(filename,\
      \ 'wb') as f:\n                    f.write(content)\n\n                print(f\"\
      [OK] Detected file type: {tag.decode()} -> saved as {filename}\")\n\n      \
      \          # Cross-platform open\n                if sys.platform.startswith(\"\
      darwin\"):  # macOS\n                    subprocess.run([\"open\", filename])\n\
      \                elif sys.platform.startswith(\"linux\"):\n                \
      \    subprocess.run([\"xdg-open\", filename])\n                elif sys.platform.startswith(\"\
      win\"):\n                    os.startfile(filename)\n\n                detected\
      \ = True\n                break\n\n        if not detected:\n            print(\"\
      [INFO] No file type found yet, retrying...\")\n            time.sleep(1)"
    comment: ''
    priority: '0'
    section: main_after_stop
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 44.0]
    rotation: 0
    state: enabled
- name: soapy_bladerf_sink_0
  id: soapy_bladerf_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: freq
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: txgain
    samp_rate: samp_rate_blade*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 316.0]
    rotation: 0
    state: disabled
- name: soapy_bladerf_sink_0_0
  id: soapy_bladerf_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: freq/2
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: txgain
    samp_rate: samp_rate_blade*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 1324.0]
    rotation: 0
    state: disabled
- name: soapy_bladerf_source_0
  id: soapy_bladerf_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: rxbw
    center_freq: freq
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '30.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 364.0]
    rotation: 0
    state: disabled
- name: soapy_bladerf_source_0_0
  id: soapy_bladerf_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: rxbw
    center_freq: freq/2
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '30.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 1356.0]
    rotation: 0
    state: disabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 872.0]
    rotation: 180
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: channel_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 200.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: ACK
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 1856.0]
    rotation: 180
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: channel_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 548.0]
    rotation: 0
    state: enabled
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 1032.0]
    rotation: 0
    state: enabled
- name: virtual_source_2
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: ACK
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 360.0]
    rotation: 180
    state: enabled

connections:
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_multiply_const_vxx_0, '0', soapy_bladerf_sink_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', soapy_bladerf_sink_0_0, '0']
- [blocks_repack_bits_bb_1, '0', virtual_sink_0, '0']
- [blocks_repack_bits_bb_1_0, '0', virtual_sink_1, '0']
- [blocks_tagged_stream_mux_0, '0', virtual_sink_0_0, '0']
- [blocks_tagged_stream_mux_0_0, '0', digital_constellation_modulator_0_0, '0']
- [blocks_throttle2_0, '0', channels_channel_model_0, '0']
- [blocks_throttle2_0_0, '0', channels_channel_model_0_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', digital_correlate_access_code_xx_ts_0, '0']
- [blocks_unpack_k_bits_bb_0_0, '0', digital_correlate_access_code_xx_ts_0_0, '0']
- [channels_channel_model_0, '0', digital_symbol_sync_xx_0, '0']
- [channels_channel_model_0, '0', qtgui_freq_sink_x_1, '0']
- [channels_channel_model_0_0, '0', digital_symbol_sync_xx_0_0, '0']
- [channels_channel_model_0_0, '0', qtgui_freq_sink_x_1_0, '0']
- [digital_constellation_decoder_cb_0, '0', blocks_char_to_float_0, '0']
- [digital_constellation_decoder_cb_0, '0', digital_diff_decoder_bb_0, '0']
- [digital_constellation_decoder_cb_0_0, '0', digital_diff_decoder_bb_0_0, '0']
- [digital_constellation_modulator_0, '0', blocks_multiply_const_vxx_0, '0']
- [digital_constellation_modulator_0, '0', blocks_throttle2_0, '0']
- [digital_constellation_modulator_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_constellation_modulator_0_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [digital_constellation_modulator_0_0, '0', blocks_throttle2_0_0, '0']
- [digital_constellation_modulator_0_0, '0', qtgui_freq_sink_x_0_0, '0']
- [digital_correlate_access_code_xx_ts_0, '0', blocks_repack_bits_bb_1, '0']
- [digital_correlate_access_code_xx_ts_0_0, '0', blocks_repack_bits_bb_1_0, '0']
- [digital_costas_loop_cc_0, '0', digital_constellation_decoder_cb_0, '0']
- [digital_costas_loop_cc_0, '0', qtgui_const_sink_x_0, '0']
- [digital_costas_loop_cc_0_0, '0', digital_constellation_decoder_cb_0_0, '0']
- [digital_costas_loop_cc_0_0, '0', qtgui_const_sink_x_0_0, '0']
- [digital_crc_append_0, out, epy_block_5, in]
- [digital_crc_append_0_0, out, epy_block_0_0, in]
- [digital_diff_decoder_bb_0, '0', digital_map_bb_0, '0']
- [digital_diff_decoder_bb_0_0, '0', digital_map_bb_0_0, '0']
- [digital_linear_equalizer_0_0, '0', digital_costas_loop_cc_0, '0']
- [digital_linear_equalizer_0_0_0, '0', digital_costas_loop_cc_0_0, '0']
- [digital_map_bb_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [digital_map_bb_0_0, '0', blocks_unpack_k_bits_bb_0_0, '0']
- [digital_protocol_formatter_async_0, header, pdu_pdu_to_tagged_stream_0, pdus]
- [digital_protocol_formatter_async_0, payload, pdu_pdu_to_tagged_stream_0_0, pdus]
- [digital_protocol_formatter_async_0_0, header, pdu_pdu_to_tagged_stream_0_1, pdus]
- [digital_protocol_formatter_async_0_0, payload, pdu_pdu_to_tagged_stream_0_0_0,
  pdus]
- [digital_symbol_sync_xx_0, '0', digital_linear_equalizer_0_0, '0']
- [digital_symbol_sync_xx_0_0, '0', digital_linear_equalizer_0_0_0, '0']
- [epy_block_0, out, digital_protocol_formatter_async_0, in]
- [epy_block_0_0, out, digital_protocol_formatter_async_0_0, in]
- [epy_block_2, out, digital_crc_append_0, in]
- [epy_block_3, out, epy_block_6, in]
- [epy_block_3_0, out, epy_block_2, ack_in]
- [epy_block_4, ack_out, digital_crc_append_0_0, in]
- [epy_block_4, out, epy_block_1, in]
- [epy_block_5, out, epy_block_0, in]
- [epy_block_6, out, epy_block_4, in]
- [pdu_pdu_to_tagged_stream_0, '0', blocks_tagged_stream_mux_0, '0']
- [pdu_pdu_to_tagged_stream_0_0, '0', blocks_tagged_stream_mux_0, '1']
- [pdu_pdu_to_tagged_stream_0_0_0, '0', blocks_tagged_stream_mux_0_0, '1']
- [pdu_pdu_to_tagged_stream_0_1, '0', blocks_tagged_stream_mux_0_0, '0']
- [pdu_tagged_stream_to_pdu_0, pdus, epy_block_3, in]
- [pdu_tagged_stream_to_pdu_0_0, pdus, epy_block_3_0, in]
- [soapy_bladerf_source_0, '0', digital_symbol_sync_xx_0, '0']
- [soapy_bladerf_source_0, '0', qtgui_freq_sink_x_1, '0']
- [soapy_bladerf_source_0_0, '0', digital_symbol_sync_xx_0_0, '0']
- [soapy_bladerf_source_0_0, '0', qtgui_freq_sink_x_1_0, '0']
- [virtual_source_0, '0', digital_constellation_modulator_0, '0']
- [virtual_source_1, '0', pdu_tagged_stream_to_pdu_0, '0']
- [virtual_source_2, '0', pdu_tagged_stream_to_pdu_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
