options:
  parameters:
    author: BellLabz
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: cdp project
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: cdp
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: cdp
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3248, 456.0]
    rotation: 0
    state: enabled

blocks:
- name: arity
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2640, 84.0]
    rotation: 0
    state: enabled
- name: eq_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,1,1,1'
    label: 'Equalizer: rate'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.001'
    stop: '0.1'
    value: '0.01'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3008, 312.0]
    rotation: 0
    state: enabled
- name: excess_bw
  id: variable
  parameters:
    comment: Set Bandwidth
    value: '.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2464, 28.0]
    rotation: 0
    state: enabled
- name: hdr_format
  id: variable_header_format_default
  parameters:
    access_code: '11100001010110101110100010010011'
    bps: '1'
    comment: ''
    threshold: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2600, 404.0]
    rotation: 0
    state: enabled
- name: k
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2608, 180.0]
    rotation: 0
    state: enabled
- name: nfilts
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2592, -4.0]
    rotation: 0
    state: enabled
- name: phase_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,2,1,1'
    label: 'Phase: Bandwidth'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.01'
    stop: '1.0'
    value: 6.28/100.0
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3440, 456.0]
    rotation: 0
    state: enabled
- name: polys
  id: variable
  parameters:
    comment: ''
    value: '[109, 79]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2616, 268.0]
    rotation: 0
    state: enabled
- name: qpsk
  id: variable_constellation_rect
  parameters:
    comment: ''
    const_points: '[0.707+0.707j, -0.707+0.707j, -0.707-0.707j, 0.707-0.707j]'
    imag_sect: '2'
    precision: '8'
    real_sect: '2'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 2, 3]'
    w_imag_sect: '1'
    w_real_sect: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2840, 516.0]
    rotation: 0
    state: enabled
- name: rrc_taps
  id: variable
  parameters:
    comment: ''
    value: firdes.root_raised_cosine(nfilts, nfilts, 1.0/float(sps), 0.35, 11*sps*nfilts)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2832, 4.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 600e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2704, 164.0]
    rotation: 0
    state: enabled
- name: samp_rate_blade
  id: variable
  parameters:
    comment: ''
    value: 600e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2416, 108.0]
    rotation: 0
    state: enabled
- name: spr
  id: variable
  parameters:
    comment: ''
    value: '750000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2704, 20.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: Samples Per Symbol
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2760, 116.0]
    rotation: 0
    state: enabled
- name: variable_adaptive_algorithm_0
  id: variable_adaptive_algorithm
  parameters:
    comment: ''
    cons: qpsk
    delta: '10.0'
    ffactor: '0.99'
    modulus: '4'
    step_size: '.0001'
    type: cma
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3064, 460.0]
    rotation: 0
    state: enabled
- name: variable_qtgui_entry_0
  id: variable_qtgui_entry
  parameters:
    comment: ''
    entry_signal: editingFinished
    gui_hint: ''
    label: ''
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 44.0]
    rotation: 0
    state: enabled
- name: MTU
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: MTU
    short_id: ''
    type: intx
    value: '1500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2912, 180.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.8'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 472.0]
    rotation: 0
    state: enabled
- name: blocks_repack_bits_bb_1_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: '1'
    l: '8'
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [208, 1292.0]
    rotation: 180
    state: enabled
- name: blocks_tagged_stream_mux_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 192.0]
    rotation: 0
    state: enabled
- name: blocks_unpack_k_bits_bb_0_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: unpack 2 bits per symbol into bits
    k: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 1288.0]
    rotation: 180
    state: enabled
- name: controls
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 0,0,1,2
    label0: Channel
    label1: Receiver
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3440, 132.0]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: "Decode a constellation's points from \na complex space to index of constellation\
      \ \nsymbol based on the map of the  object."
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1536, 1296.0]
    rotation: 180
    state: enabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: Modulation block
    constellation: qpsk
    differential: 'True'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 452.0]
    rotation: 0
    state: enabled
- name: digital_correlate_access_code_xx_ts_0_0
  id: digital_correlate_access_code_xx_ts
  parameters:
    access_code: '11100001010110101110100010010011'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tagname: '"packet_len"'
    threshold: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 1284.0]
    rotation: 180
    state: enabled
- name: digital_costas_loop_cc_0_0
  id: digital_costas_loop_cc
  parameters:
    affinity: ''
    alias: ''
    comment: Phase and Fine Frequency Correction
    maxoutbuf: '0'
    minoutbuf: '0'
    order: arity
    use_snr: 'False'
    w: phase_bw
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1384, 984.0]
    rotation: 0
    state: enabled
- name: digital_crc_append_0
  id: digital_crc_append
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    final_xor: '0xFFFFFFFF'
    initial_value: '0xFFFFFFFF'
    input_reflected: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_bits: '32'
    poly: '0x4C11DB7'
    result_reflected: 'True'
    skip_header_bytes: '0'
    swap_endianness: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 240.0]
    rotation: 0
    state: true
- name: digital_diff_decoder_bb_0_0
  id: digital_diff_decoder_bb
  parameters:
    affinity: ''
    alias: ''
    coding: digital.DIFF_DIFFERENTIAL
    comment: "translate the differential coded symbols\n back to their original symbols"
    maxoutbuf: '0'
    minoutbuf: '0'
    modulus: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 1276.0]
    rotation: 180
    state: enabled
- name: digital_linear_equalizer_0_0_0
  id: digital_linear_equalizer
  parameters:
    adapt_after_training: 'True'
    affinity: ''
    alg: variable_adaptive_algorithm_0
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '15'
    sps: '4'
    training_sequence: '[ ]'
    training_start_tag: corr_est
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 960.0]
    rotation: 0
    state: enabled
- name: digital_map_bb_0_0
  id: digital_map_bb
  parameters:
    affinity: ''
    alias: ''
    comment: "convert the symbols \nfrom the differential decoder to the \noriginal\
      \ symbols we transmitted."
    map: '[0,1,2,3]'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1056, 1280.0]
    rotation: 180
    state: enabled
- name: digital_protocol_formatter_async_0
  id: digital_protocol_formatter_async
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    format: hdr_format
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [840, 176.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: phase_bw
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '32'
    osps: '4'
    pfb_mf_taps: rrc_taps
    resamp_type: digital.IR_PFB_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [584, 824.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_add(gr.basic_block):\n    \"\"\"\n\
      \    Block to prepend an address byte to a PDU payload\n    \"\"\"\n    def\
      \ __init__(self, address=0x01):\n        gr.basic_block.__init__(\n        \
      \    self,\n            name=\"address_add\",\n            in_sig=[],\n    \
      \        out_sig=[]\n        )\n        self.address = address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  # prepend address\n            data.insert(0, self.address)\n           \
      \ out_msg = pmt.cons(meta, pmt.init_u8vector(len(data), data))\n           \
      \ self.message_port_pub(pmt.intern(\"out\"), out_msg)\n"
    address: '15'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('address_add', 'address_add', [('address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to prepend an address byte to a PDU
      payload\n    ', ['address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 88.0]
    rotation: 0
    state: enabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport threading\n\
      import pmt\nfrom gnuradio import gr\nimport time\n\nclass pdu_text_gui(gr.basic_block):\n\
      \    \"\"\"\n    Custom block: QT GUI Message Entry -> PDU sender with Go-Back-N\
      \ ARQ.\n    - Splits text into packets (2 bytes: [address, seq_id] + payload)\n\
      \    - Sends packets in a sliding window\n    - Waits for ACKs [0xAA, seq_id]\n\
      \    - On timeout, retransmits all unACKed packets in window\n    \"\"\"\n\n\
      \    def __init__(self, wait_time=2.0, pkt_size=32, address=0x01, retry_limit=100,\
      \ window_size=4):\n        gr.basic_block.__init__(\n            self,\n   \
      \         name=\"GUI Text to PDU with Go-Back-N ARQ\",\n            in_sig=[],\n\
      \            out_sig=[]\n        )\n\n        # Parameters\n        self._timeout\
      \ = float(wait_time)\n        self._pkt_size = int(pkt_size)\n        self._address\
      \ = int(address) & 0xFF\n        self._retry_limit = int(retry_limit)\n    \
      \    self._window_size = int(window_size)\n\n        # Sequence ID\n       \
      \ self._seq_id = 1  # 0x01..0xFF, avoid 0x00\n\n        # Message ports\n  \
      \      self.message_port_register_out(pmt.intern(\"out\"))\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.set_msg_handler(pmt.intern(\"in\"), self._process_text)\n\
      \n        self.message_port_register_in(pmt.intern(\"ack_in\"))\n        self.set_msg_handler(pmt.intern(\"\
      ack_in\"), self._process_ack)\n\n        # Thread + synchronization\n      \
      \  self._thread = None\n        self._stop_event = threading.Event()\n     \
      \   self._lock = threading.Lock()\n\n        # Buffers\n        self._text_data\
      \ = b\"\"\n        self._packets = []\n        self._base = 0          # first\
      \ unACKed packet index\n        self._next_to_send = 0  # next packet index\
      \ to send\n        self._attempts = 0\n\n    # ---------------------------\n\
      \    # Message handler from GUI\n    # ---------------------------\n    def\
      \ _process_text(self, msg):\n        try:\n            if pmt.is_symbol(msg):\n\
      \                text_str = pmt.symbol_to_string(msg)\n            elif pmt.is_string(msg):\n\
      \                text_str = pmt.string_to_string(msg)\n            else:\n \
      \               print(\"[pdu_text_gui] Invalid PMT message type\")\n       \
      \         return\n\n            self._text_data = text_str.encode(\"utf-8\"\
      )\n\n            # Start sending in a separate thread\n            if self._thread\
      \ is None or not self._thread.is_alive():\n                self._stop_event.clear()\n\
      \                self._thread = threading.Thread(target=self._run)\n       \
      \         self._thread.daemon = True\n                self._thread.start()\n\
      \n        except Exception as e:\n            print(f\"[pdu_text_gui] Error\
      \ processing text: {e}\")\n\n    # ---------------------------\n    # Sending\
      \ loop (Go-Back-N)\n    # ---------------------------\n    def _run(self):\n\
      \        raw = self._text_data\n        step = self._pkt_size - 2\n        blocks\
      \ = [raw[i:i+step] for i in range(0, len(raw), step)]\n\n        # Build packets\
      \ with headers\n        self._packets = []\n        for block in blocks:\n \
      \           packet = bytes([self._address, self._seq_id]) + block\n        \
      \    self._packets.append((self._seq_id, packet))\n            self._seq_id\
      \ = (self._seq_id + 1) & 0xFF\n            if self._seq_id == 0:\n         \
      \       self._seq_id = 1\n\n        self._base = 0\n        self._next_to_send\
      \ = 0\n        self._attempts = 0\n\n        while self._base < len(self._packets)\
      \ and not self._stop_event.is_set():\n            with self._lock:\n       \
      \         # Send up to window_size packets\n                while self._next_to_send\
      \ < self._base + self._window_size and self._next_to_send < len(self._packets):\n\
      \                    seq_id, packet = self._packets[self._next_to_send]\n  \
      \                  vec = pmt.init_u8vector(len(packet), list(packet))\n    \
      \                pdu = pmt.cons(pmt.PMT_NIL, vec)\n                    self.message_port_pub(pmt.intern(\"\
      out\"), pdu)\n                    print(f\"[pdu_text_gui] Packet id=0x{seq_id:02X}\
      \ sent\")\n                    self._next_to_send += 1\n\n            # Wait\
      \ for ACK\n            time.sleep(self._timeout)\n\n            with self._lock:\n\
      \                if self._base < self._next_to_send:  # still unACKed packets\n\
      \                    self._attempts += 1\n                    if self._attempts\
      \ >= self._retry_limit:\n                        print(\"[pdu_text_gui] Failed:\
      \ retry limit exceeded\")\n                        self._stop_event.set()\n\
      \                        break\n                    print(\"[pdu_text_gui] Timeout:\
      \ retransmitting window\")\n                    # retransmit all unACKed packets\n\
      \                    for i in range(self._base, self._next_to_send):\n     \
      \                   seq_id, packet = self._packets[i]\n                    \
      \    vec = pmt.init_u8vector(len(packet), list(packet))\n                  \
      \      pdu = pmt.cons(pmt.PMT_NIL, vec)\n                        self.message_port_pub(pmt.intern(\"\
      out\"), pdu)\n                        print(f\"[pdu_text_gui] Retransmit id=0x{seq_id:02X}\"\
      )\n\n    # ---------------------------\n    # ACK handler\n    # ---------------------------\n\
      \    def _process_ack(self, msg):\n        try:\n            payload = pmt.cdr(msg)\n\
      \            if not pmt.is_u8vector(payload):\n                return\n\n  \
      \          arr = bytearray(pmt.u8vector_elements(payload))\n            if len(arr)\
      \ < 2 or arr[0] != 0xAA:\n                return\n\n            ack_id = arr[1]\n\
      \            with self._lock:\n                # slide window if ACK is valid\n\
      \                for i in range(self._base, self._next_to_send):\n         \
      \           seq_id, _ = self._packets[i]\n                    if seq_id == ack_id:\n\
      \                        print(f\"[pdu_text_gui] ACK received for id=0x{ack_id:02X}\"\
      )\n                        self._base = i + 1\n                        self._attempts\
      \ = 0  # reset retries\n                        break\n\n        except Exception\
      \ as e:\n            print(f\"[pdu_text_gui] Error processing ACK: {e}\")\n"
    address: '15'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    pkt_size: '32'
    retry_limit: '100'
    wait_time: '0.2'
    window_size: '7'
  states:
    _io_cache: '(''GUI Text to PDU with Go-Back-N ARQ'', ''pdu_text_gui'', [(''wait_time'',
      ''2.0''), (''pkt_size'', ''32''), (''address'', ''1''), (''retry_limit'', ''100''),
      (''window_size'', ''4'')], [(''ack_in'', ''message'', 1), (''in'', ''message'',
      1)], [(''out'', ''message'', 1)], ''\n    Custom block: QT GUI Message Entry
      -> PDU sender with Go-Back-N ARQ.\n    - Splits text into packets (2 bytes:
      [address, seq_id] + payload)\n    - Sends packets in a sliding window\n    -
      Waits for ACKs [0xAA, seq_id]\n    - On timeout, retransmits all unACKed packets
      in window\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 184.0]
    rotation: 0
    state: enabled
- name: epy_block_3_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_check(gr.basic_block):\n    \"\"\"\n\
      \    Block to check address and strip it if matches\n    \"\"\"\n    def __init__(self,\
      \ my_address=0x01):\n        gr.basic_block.__init__(\n            self,\n \
      \           name=\"address_check\",\n            in_sig=[],\n            out_sig=[]\n\
      \        )\n        self.my_address = my_address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  if data[0] == self.my_address:\n                # strip address\n       \
      \         payload = data[1:]\n                out_msg = pmt.cons(meta, pmt.init_u8vector(len(payload),\
      \ payload))\n                self.message_port_pub(pmt.intern(\"out\"), out_msg)\n\
      \            # else drop silently\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    my_address: '50'
  states:
    _io_cache: ('address_check', 'address_check', [('my_address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to check address and strip it if
      matches\n    ', ['my_address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [64, 304.0]
    rotation: 180
    state: enabled
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport pmt\nfrom\
      \ gnuradio import gr\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding\
      \ import pad\n\nclass aes_encrypt(gr.basic_block):\n    \"\"\"\n    AES Encryption\
      \ Block\n    - Encrypts PDUs using AES-128-CBC\n    - Key & IV fixed for demo\
      \ (replace with secure exchange in real systems)\n    \"\"\"\n\n    def __init__(self,\
      \ key=b\"1234567890abcdef\", iv=b\"abcdef1234567890\"):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"AES Encrypt\",\n            in_sig=[],\n\
      \            out_sig=[]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n        self.key\
      \ = key\n        self.iv = iv\n\n    def handle_msg(self, msg_pmt):\n      \
      \  if pmt.is_pair(msg_pmt):\n            meta = pmt.car(msg_pmt)\n         \
      \   data = bytes(pmt.u8vector_elements(pmt.cdr(msg_pmt)))\n\n            cipher\
      \ = AES.new(self.key, AES.MODE_CBC, self.iv)\n            enc_data = cipher.encrypt(pad(data,\
      \ AES.block_size))\n\n            out_pmt = pmt.cons(meta, pmt.init_u8vector(len(enc_data),\
      \ list(enc_data)))\n            self.message_port_pub(pmt.intern(\"out\"), out_pmt)\n"
    affinity: ''
    alias: ''
    comment: ''
    iv: b"abcdef1234567890"
    key: b"1234567890abcd30"
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES Encrypt', 'aes_encrypt', [('key', "b'1234567890abcdef'"), ('iv',
      "b'abcdef1234567890'")], [('in', 'message', 1)], [('out', 'message', 1)], '\n    AES
      Encryption Block\n    - Encrypts PDUs using AES-128-CBC\n    - Key & IV fixed
      for demo (replace with secure exchange in real systems)\n    ', ['iv', 'key'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 124.0]
    rotation: 0
    state: enabled
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Header
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1128, 152.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 224.0]
    rotation: 0
    state: true
- name: pdu_tagged_stream_to_pdu_0_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 352.0]
    rotation: 180
    state: enabled
- name: qtgui_edit_box_msg_0
  id: qtgui_edit_box_msg
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gui_hint: ''
    is_pair: 'False'
    is_static: 'True'
    key: ''
    label: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [248, 8.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: Frequency Spectrum of Tx
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: TX - Spectrum
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 580.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_1_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '256'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: RX-SPECTRUM of ACK
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 1108.0]
    rotation: 0
    state: enabled
- name: soapy_bladerf_sink_0
  id: soapy_bladerf_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: 1.2e9
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '50'
    samp_rate: samp_rate_blade*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 476.0]
    rotation: 0
    state: enabled
- name: soapy_bladerf_source_0_0
  id: soapy_bladerf_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: 5.8e9
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '30.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 996.0]
    rotation: 0
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: channel_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 200.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: ACK
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 1304.0]
    rotation: 180
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: channel_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 480.0]
    rotation: 0
    state: enabled
- name: virtual_source_2
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: ACK
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 352.0]
    rotation: 180
    state: enabled

connections:
- [blocks_multiply_const_vxx_0, '0', soapy_bladerf_sink_0, '0']
- [blocks_repack_bits_bb_1_0, '0', virtual_sink_1, '0']
- [blocks_tagged_stream_mux_0, '0', virtual_sink_0_0, '0']
- [blocks_unpack_k_bits_bb_0_0, '0', digital_correlate_access_code_xx_ts_0_0, '0']
- [digital_constellation_decoder_cb_0_0, '0', digital_diff_decoder_bb_0_0, '0']
- [digital_constellation_modulator_0, '0', blocks_multiply_const_vxx_0, '0']
- [digital_constellation_modulator_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_correlate_access_code_xx_ts_0_0, '0', blocks_repack_bits_bb_1_0, '0']
- [digital_costas_loop_cc_0_0, '0', digital_constellation_decoder_cb_0_0, '0']
- [digital_crc_append_0, out, epy_block_5, in]
- [digital_diff_decoder_bb_0_0, '0', digital_map_bb_0_0, '0']
- [digital_linear_equalizer_0_0_0, '0', digital_costas_loop_cc_0_0, '0']
- [digital_map_bb_0_0, '0', blocks_unpack_k_bits_bb_0_0, '0']
- [digital_protocol_formatter_async_0, header, pdu_pdu_to_tagged_stream_0, pdus]
- [digital_protocol_formatter_async_0, payload, pdu_pdu_to_tagged_stream_0_0, pdus]
- [digital_symbol_sync_xx_0_0, '0', digital_linear_equalizer_0_0_0, '0']
- [epy_block_0, out, digital_protocol_formatter_async_0, in]
- [epy_block_2_0, out, digital_crc_append_0, in]
- [epy_block_3_0, out, epy_block_2_0, ack_in]
- [epy_block_5, out, epy_block_0, in]
- [pdu_pdu_to_tagged_stream_0, '0', blocks_tagged_stream_mux_0, '0']
- [pdu_pdu_to_tagged_stream_0_0, '0', blocks_tagged_stream_mux_0, '1']
- [pdu_tagged_stream_to_pdu_0_0, pdus, epy_block_3_0, in]
- [qtgui_edit_box_msg_0, msg, epy_block_2_0, in]
- [soapy_bladerf_source_0_0, '0', digital_symbol_sync_xx_0_0, '0']
- [soapy_bladerf_source_0_0, '0', qtgui_freq_sink_x_1_0, '0']
- [virtual_source_0, '0', digital_constellation_modulator_0, '0']
- [virtual_source_2, '0', pdu_tagged_stream_to_pdu_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
